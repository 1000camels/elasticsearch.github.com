---
layout: guide
title: Search API - Fields
cat: guide
sidebar: reference_api_search
---

p. Allows to selectively load specific fields for each document represented by a search hit. Defaults to load the internal @_source@ field.

<pre class="prettyprint lang-js">
{
    "fields" : ["user", "postDate"],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. The fields will automatically load stored fields (@store@ mapping set to @yes@), or, if not stored, will load the @_source@ and extract it from it (allowing to return nested document object).

p. @*@ can be used to load all stored fields from the document.

p. An empty array will cause only the @_id@ and @_type@ for each hit to be returned, for example:

<pre class="prettyprint lang-js">
{
    "fields" : [],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. Script fields can also be automatically detected and used as fields, so things like @_source.obj1.obj2@ can be used, though not recommended, as @obj1.obj2@ will work as well.

h2. Partial

p. When loading data from @_source@, partial fields can be used to use wildcards to control what part of the @_source@ will be loaded based on @include@ and @exclude@ patterns. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {}
    },
    "partial_fields" : {
        "partial1" : {
            "include" : "obj1.obj2.*",
        }
    }
}
</pre>

p. And one that will also exclude @obj1.obj3@:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {}
    },
    "partial_fields" : {
        "partial1" : {
            "include" : "obj1.obj2.*",
            "exclude" : "obj1.obj3.*"
        }
    }
}
</pre>

p. Both @include@ and @exclude@ support multiple patterns:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {}
    },
    "partial_fields" : {
        "partial1" : {
            "include" : ["obj1.obj2.*", "obj1.obj4.*"],
            "exclude" : "obj1.obj3.*"
        }
    }
}
</pre>