---
layout: guide
title: Search API - Facets
cat: guide
sidebar: reference_api_search_facets
---

The usual purpose of a full-text search engine is to return a small number of documents matching your query.

_Facets_ provide aggregated data based on a search query. In the simple case, a facet can return _facet counts_ for various _facet values_ for a specific _field_. ElasticSearch supports more advanced facet implementations, such as "statistical":/guide/reference/api/search/facets/statistical-facet.html or "date histogram":/guide/reference/api/search/facets/date-histogram-facet.html facets.

The field used for facet calculations must be of type numeric, date/time or analyzed as a single token. You can give the facet an arbitrary _name_ and return multiple facets in one request.

For example, let's suppose you have a number of articles with a field called @tags@. Facet can return counts for the most popular tags across the documents matching your query — or across all documents in the index.

Let's check out this simple example. We will store some example data first:

<pre class="prettyprint lang-bash">
curl -X DELETE "http://localhost:9200/articles"
curl -X POST "http://localhost:9200/articles/article" -d '{"title" : "One",   "tags" : ["foo"]}'
curl -X POST "http://localhost:9200/articles/article" -d '{"title" : "Two",   "tags" : ["foo", "bar"]}'
curl -X POST "http://localhost:9200/articles/article" -d '{"title" : "Three", "tags" : ["foo", "bar", "baz"]}'
</pre>

Now, let's query the index for articles beginning with letter “T” and retrieve a "_terms facet_":/guide/reference/api/search/facets/terms-facet.html for the @tags@ field:

<pre class="prettyprint lang-bash">
curl -X POST "http://localhost:9200/articles/_search?pretty=true" -d '
  {
    "query" : { "query_string" : {"query" : "T*"} },
    "facets" : {
      "tags" : { "terms" : {"field" : "tags"} }
    }
  }
'
</pre>

This request will return articles “Two” and “Three”, as well as the @tags@ facet:

<pre class="prettyprint lang-js">
"facets" : {
  "tags" : {
    "_type" : "terms",
    "missing" : 0,
    "total": 5,
    "other": 0,
    "terms" : [ {
      "term" : "foo",
      "count" : 2
    }, {
      "term" : "bar",
      "count" : 2
    }, {
      "term" : "baz",
      "count" : 1
    } ]
  }
}
</pre>

Notice that the counts are scoped for this query: _foo_ and _bar_ are counted twice, _baz_ is counted once. (This is because the primary purpose of facets is to enable "_faceted browsing_":http://en.wikipedia.org/wiki/Faceted_search, allowing the user to refine her query based on the insight from the facet: restrict the search to a specific category, price or date range, etc., most probably with a "_filter_":/guide/reference/api/search/filter.html based on selected facet.)

In the facet results, the @missing@ field represents the number of documents that have no value for that facet. 
For Term Facet, the @total@ field represents the total number terms count. The @other@ field represents all the terms that are not sent back because of the @size@ limit. See Feature Request "#1029":https://github.com/elasticsearch/elasticsearch/issues/1029 for more details.

h2. Scope

Facets are bound to the current query by default, called @main@. Every facet can be set with the @global@ scope, in which case it will return facet calculations for all documents in the index.

A shorthand to set a facet to run globally is to set the @global@ parameter to @true@:

<pre class="prettyprint lang-js">
{
    "facets" : {
        "<FACET NAME>" : {
            "<FACET TYPE>" : { ... },
            "global" : true
        }
    }
}    
</pre>

Custom scope names works in conjunction with child queries or filters, allowing to force the facets to run on the child documents matching the child specific query.

h2. Filter

All facets can be configured with an additional filter (explained in the "Query DSL":/guide/reference/query-dsl section), which will further reduce the documents they execute on. For example:

<pre class="prettyprint lang-js">
{
    "facets" : {
        "<FACET NAME>" : {
            "<FACET TYPE>" : {
                ...
            },
            "facet_filter" : {
                "term" : { "user" : "kimchy"}
            }
        }
    }
}    
</pre>

h2. Facets on nested mapping

p. "nested":/guide/reference/mapping/nested-type.html mapping allows for better support for "inner" documents faceting, especially when it comes to multi valued key and value facets (like histograms, or term stats).

p. Why is it good for? First of all, this is the only way to use facets on nested documents once they are used (possibly for other reasons). But, there is also facet specific reason why nested documents can be used, and thats the fact that facets working on different key and value field (like term_stats, or histogram) can now support cases where both are multi valued properly.

p. For example, lets use the following mapping:

<pre class="prettyprint lang-js">
{
    "type1" : {
        "properties" : {
            "obj1" : {
                "type" : "nested"
            }
        }
    }
}
</pre>

p. And, here is a sample data:

<pre class="prettyprint lang-js">
{
    "obj1" : [
        {
            "name" : "blue",
            "count" : 4
        },
        {
            "name" : "green",
            "count" : 6
        }
    ]
}
</pre>

h3. Nested Query Facets

p. Any @nested@ query allows to specify a @_scope@ associated with it. Any @facet@ allows for a scope to be defined on it controlling the scope it will execute against. For example, the following @facet1@ terms stats facet will only run on documents matching the nested query associated with @my_scope@:

<pre class="prettyprint lang-js">
{
    "query": {
        "nested": {
            "_scope": "my_scope",
            "path": "obj1",
            "score_mode": "avg",
            "query": {
                "bool": {
                    "must": [
                        {"text": {"obj1.name": "blue"}},
                        {"range": {"obj1.count": {"gt": 3}}}
                    ]
                }
            }
        }
    },
    "facets": {
        "facet1": {
            "terms_stats": {
                "key_field": "obj1.name",
                "value_field": "obj1.count"
            },
            "scope": "my_scope"
        }
    }
}
</pre>

h3. All Nested Matching Root Documents

p. Another option is to run the facet on all the nested documents matching the root objects that the main query will end up producing. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {}
    },
    "facets" : {
        "facet1" : {
            "terms_stats" : {
                "key_field" : "name",
                "value_field" : "count",
            },
            "nested" : "obj1"
        }
    }
}
</pre>

p. The @nested@ element provides the path to the nested document (can be a multi level nested docs) that will be used.
