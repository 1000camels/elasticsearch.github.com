---
layout: doc_es
title: ElasticSearch Docs | Index Modules | Merge | Policy
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["index_modules", "Index Modules"], 
    ["merge", "Merge"], 
    ["policy", "Policy"], 
];
</script>

h1. Index Merge Policy Module

p. The index merge policy module allows to control which segments of a shard index are to be merged. There are several types of policies with the default set to @LogByteSizeMergePolicy@.

h2. LogByteSizeMergePolicy

p. A merge policy that tries to merge segments into levels of exponentially increasing *byte size*, where each level has fewer segments than the value of the merge factor. Whenever extra segments (beyond the merge factor upper bound) are encountered, all segments within the level are merged.

p. This policy has the following settings:

|_. Setting |_. Description |
|index.merge.policy.merge_factor|Determines how often segment indices are merged by index operation.  With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster, but indexing speed is slower.  With larger values, more RAM is used during indexing, and while searches on unoptimized indices are slower, indexing is faster.  Thus larger values (greater than 10) are best for batch index creation, and smaller values (lower than 10) for indices that are interactively maintained. Defaults to @10@.|
|index.merge.policy.min_merge_size|A size setting type which sets the minimum size for the lowest level segments. Any segments below this size are considered to be on the same level (even if they vary drastically in size) and will be merged whenever there are mergeFactor of them.  This effectively truncates the "long tail" of small segments that would otherwise be created into a single level.  If you set this too large, it could greatly increase the merging cost during indexing (if you flush many small segments). Defaults to @1.6mb@|
|index.merge.policy.max_merge_size|A size setting type which sets the largest segment (measured by total byte size of the segment's files) that may be merged with other segments. Defaults to unbounded.|
|index.merge.policy.maxMergeDocs|Determines the largest segment (measured by document count) that may be merged with other segments. Defaults to unbounded.|

h2. LogDocMergePolicyProvider

p. A merge policy that tries to merge segments into levels of exponentially increasing *document count*, where each level has fewer segments than the value of the merge factor. Whenever extra segments (beyond the merge factor upper bound) are encountered, all segments within the level are merged.

|_. Setting |_. Description |
|index.merge.policy.merge_factor|Determines how often segment indices are merged by index operation.  With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster, but indexing speed is slower.  With larger values, more RAM is used during indexing, and while searches on unoptimized indices are slower, indexing is faster.  Thus larger values (greater than 10) are best for batch index creation, and smaller values (lower than 10) for indices that are interactively maintained. Defaults to @10@.|
|index.merge.policy.min_merge_docs|Sets the minimum size for the lowest level segments. Any segments below this size are considered to be on the same level (even if they vary drastically in size) and will be merged whenever there are mergeFactor of them.  This effectively truncates the "long tail" of small segments that would otherwise be created into a single level.  If you set this too large, it could greatly increase the merging cost during indexing (if you flush many small segments). Defaults to @1000@.|
|index.merge.policy.max_merge_docs|Determines the largest segment (measured by document count) that may be merged with other segments. Defaults to unbounded.|
