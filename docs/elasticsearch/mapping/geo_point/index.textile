---
layout: doc_es
title: ElasticSearch Docs | Mapping | Geo Point Type
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["mapping", "Mapping"], 
    ["geo_point_type", "Geo Point Type"], 
];
</script>

h1. Geo Point Type

p. Mapper type called @geo_point@ to support geo based points. The declaration looks as follows:

<pre class="prettyprint lang-js">
{
    "pin" : {
        "properties" : {
            "location" : {
                "type" : "geo_point"
            }
        }
    }
}
</pre>

h2. Input Structure

The above mapping defines a @geo_point@, which accepts different formats. The following formats are supported:

h3. Lat Lon as Properties

<pre class="prettyprint lang-js">
{
    "pin" : {
        "location" : {
            "lat" : 41.12,
            "lon" : -71.34
        }
    }
}
</pre>

h3. Lat Lon as String

<pre class="prettyprint lang-js">
{
    "pin" : {
        "location" : "41.12,-71.34"
    }
}
</pre>

h3. Geohash

<pre class="prettyprint lang-js">
{
    "pin" : {
        "location" : "drm3btev3e86"
    }
}
</pre>

h3. Lat Lon as Array

<pre class="prettyprint lang-js">
{
    "pin" : {
        "location" : [41.12, -71.34]
    }
}
</pre>


h2. Indexed Fields

p. The `geo_point` mapping will index a single field with the format of `lat,lon`. The `lat_lon` option can be set to also index the `.lat` and `.lon` as numeric fields, and `geohash` can be set to `true` to also index `.geohash` value. Note, those values are almost never needed to be indexed unless explicit queries against those fields are needed. All the geo components work against the default indexed field.

h2. Mapping Options

|_. Option |_. Description |
|@lat_lon@|Set to `true` to also index the `.lat` and `.lon` as fields. Defaults to `false`.|
|@geohash@|Set to `true` to also index the `.geohash` as a field. defaults to false.|
|@geohash_precision@|Sets the geohash precision, defaults to 12.|

h2. Usage in Scripts

p. When using `doc[geo_field_name]` (in the above mapping, `doc['location']`), the `doc[...].value` returns a `GeoPoint`, which then allows access to `lat` and `lon` (for example, `doc[...].value.lat`). For performance, it is better to access the `lat` and `lon` directly using `doc[...].latValue` and `doc[...].lonValue`.

