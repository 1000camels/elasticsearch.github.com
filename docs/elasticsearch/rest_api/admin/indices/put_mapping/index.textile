---
layout: doc_es
title: ElasticSearch Docs | REST Put Mapping API
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["admin", "Admin"],
    ["indices", "Indices"],
    ["put_mapping", "Put Mapping"]
];
</script>

h1. Put Mapping

p. The put mapping API allows to register specific mapping definition for a specific type.

<pre class="prettyprint">
$ curl -XPUT http://localhost:9200/twitter/tweet/_mapping -d '
{
    "tweet" : {
        "properties" : {
            "message" : {"type" : "string", "store" : "yes"}
        }
    }
}
'
</pre>

p. The above example creates a mapping called @tweet@ within the @twitter@ index. The mapping simply defines that the @message@ field should be stored (by default, fields are not stored, just indexed) so we can retrieve it later on using selective loading. More information on how to define type mappings can be found in the "mapping":/docs/elasticsearch/mapping section. 

p. The put mapping operation automatically creates an index if it has not been created before (check out the "create index API":../create_index for manually creating an index).

h2. Merging &amp; Conflicts

p. When an existing mapping already exists under the given type, the two mapping definitions, the one already defined, and the new ones are merged. The @ignore_conflicts@ parameters can be used to control if conflicts should be ignored or not, by default, it is set to @true@ which means conflicts are ignored.

p. The definition of conflict is really dependent on the type merged, but in general, if the same core type is defined, it is considered as a conflict. New mapping definitions can be added to object types, and core type mapping can be upgraded to multi_field type.

h2. Multi Index

p. The put mapping API can be applied to more than one index with a single call, or even on @_all@ the indices.

<pre class="prettyprint">
$ curl -XPUT http://localhost:9200/kimchy,elasticsearch/tweet/_mapping -d '
{
    "tweet" : {
        "properties" : {
            "message" : {"type" : "string", "store" : "yes"}
        }
    }
}
'
</pre>
