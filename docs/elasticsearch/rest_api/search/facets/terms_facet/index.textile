---
layout: doc_es
title: ElasticSearch Docs | REST API | Search | Facets | Terms Facet
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["search", "Search"],
    ["facets", "Facets"],
    ["terms_facet", "Terms Facet"],
];
</script>

h1. Terms Facet

p. Allow to specify field facets that return the N most frequent terms. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10
            }
        }
    }
}
</pre>

p(note). It is preferred to have the terms facet executed on a non analyzed field, or a field without a large number of terms it breaks to.

h2. Ordering

p. Allow to control the ordering of the terms facets, to be ordered by @count@, @term@, @reverse_count@ or @reverse_term@. The default is @count@. Here is an example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10,
                "order" : "term"
            }
        }
    }
}
</pre>

h2. Excluding Terms

p. It is possible to specify a set of terms that should be excluded from the terms facet request result:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : { }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "exclude" : ["term1", "term2"]
            }
        }
    }
}
</pre>

h2. Regex Patterns

p. The terms API allows to define regex expression that will control which terms will be included in the faceted list, here is an example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : { }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "regex" : "_regex expression here_"
                "regex_flags" : "DOTALL"
            }
        }
    }
}
</pre>

h2. Term Scripts

p. Allow to define a script for terms facet to control the actual term that will be used in the term facet collection, and also optionally control its inclusion or not.

p. The script can either return a boolean value, with @true@ to include it in the facet collection, and @false@ to exclude it from the facet collection.

p. Another option is for the script to return a @string@ controlling the term that will be used to count against. The script execution will include the term variable which is the current field term used.

p. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10,
                "script" : "term + 'aaa'"
            }
        }
    }
}
</pre>

p. And using the boolean feature:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10,
                "script" : "term == 'aaa' ? true : false"
            }
        }
    }
}
</pre>

h2. Multi Fields

p. The term facet can be executed against more than one field, returning the aggregation result across those fields. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "fields" : ["tag1", "tag2"],
                "size" : 10
            }
        }
    }
}
</pre>

h2. _index

p. The term facet allows to specify a special field name called @_index@. This will return a facet count of hits per @_index@ the search was executed on (relevant when a search request spans more than one index).

h2. Memory Considerations

p. Term facet causes the relevant field values to be loaded into memory. This means that per shard, there should be enough memory to contain them. It is advisable to explicitly set the fields to be @not_analyzed@ or make sure the number of unique tokens a field can have is not large.