---
layout: doc_es
title: ElasticSearch Docs | REST API | Search
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["search", "Search"]
];
</script>

h1. Search

The search API allows to execute a search query and get back search hits that match the query. It can be executed across one or more indices and across one or more types. The query can either be provided using a simple query string as a parameter, or using the "Query DSL":../query_dsl defined within the request body. Here is an example:

<pre class="prettyprint">
$ curl -XGET 'http://localhost:9200/twitter/tweet/_search?q=user:kimchy'

$ curl -XGET 'http://localhost:9200/twitter/tweet/_search' -d '
{
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
'
</pre>

p. Both above examples end up doing the same thing, which is search across all tweets from the twitter index for a certain user. The result of the commands is:

<pre class="prettyprint lang-js">
{
    "_shards":{
        "total" : 5,
        "successful" : 5,
        "failed" : 0
    },
    "hits":{
        "total" : 1,
        "hits" : [
            {
                "_index" : "twitter",
                "_type" : "tweet",
                "_id" : "1", 
                "_source" : {
                    "user" : "kimchy",
                    "postDate" : "2009-11-15T14:12:12",
                    "message" : "trying out Elastic Search"
                }
            }
        ]
    }
}
</pre>

h2. Multiple Indices and Types

p. The search API can be applies to multiple types within an index, and across multiple indices. For example, we can search on all documents across all types within the twitter index:

<pre class="prettyprint">
$ curl -XGET 'http://localhost:9200/_search?q=user:kimchy'
</pre>

p. We can also search within specific types:

<pre class="prettyprint">
$ curl -XGET 'http://localhost:9200/twitter/tweet,user/_search?q=user:kimchy'
</pre>

p. We can also search all tweets with a certain tag across several indices (for example, when each user has his own index):

<pre class="prettyprint">
$ curl -XGET 'http://localhost:9200/kimchy,elasticsearch/_search?q=tag:wow'
</pre>

p. Or even search across all indices:

<pre class="prettyprint">
$ curl -XGET 'http://localhost:9200/_search?q=tag:wow'
</pre>

h2. Request Parameters

p. When executing search using the query parameter @q@, the query passed is a query string using Lucene query parser. There are additional parameters that can be passed:

|_. Name |_. Description |
| @df@ | The default field to use when no field prefix is defined within the query. |
| @analyzer@ | The analyzer name to be used when analyzing the query string. |
| @default_operator@ | The default operator to be used, can be @AND@ or @OR@. Defaults to @OR@. |
| @explain@ | For each hit, contain an explanation of how to scoring of the hits was computed. |
| @fields@ | The selective fields of the document to return for each hit (fields must be stored), comma delimited. Defaults to the internal @_source@ field. |
| @field@ | Same as fields above, but each parameter contains a single field name to load. There can be several @field@ parameters. |
| @sort@ | Sorting to perform. Can either be in the form of @fieldName@, or @fieldName:reverse@ (for reverse sorting). The fieldName can either be an actual field within the document, or the special @score@ name to indicate sorting based on scores. There can be several @sort@ parameters (order is important). |
| @from@ | The starting from index of the hits to return. Defaults to @0@. |
| @size@ | The number of hits to return. Defaults to @10@. |
| @search_type@ | The type of the search operation to perform. Can be @dfs_query_then_fetch@, @dfs_query_and_fetch@, @query_then_fetch@, @query_and_fetch@. Defaults to @query_then_fetch@. |

h2. Request Body

p. The search request can also be executed with a search JSON DSL, which includes the "Query DSL":../query_dsl, within its body. When executing a search with a search body, the following can be passed as request parameters:

|_. Name |_. Description |
| @from@ | The starting from index of the hits to return. Defaults to @0@. |
| @size@ | The number of hits to return. Defaults to @10@. |
| @search_type@ | The type of the search operation to perform. Can be @dfs_query_then_fetch@, @dfs_query_and_fetch@, @query_then_fetch@, @query_and_fetch@. Defaults to @query_then_fetch@. |

p. The rest of the search request should be passed within the body itself. The body content can also be passed as a REST parameter named @source@.

p(note). Both HTTP GET and HTTP POST can be used to execute search with body. Since not all clients support GET with body, POST is allowed as well.

h3. Query

p. The query element allows to define a query using the "Query DSL":../query_dsl.

<pre class="prettyprint lang-js">
{
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h3. From / Size

p. Though both can be set as request parameters, they can also be set within the search body. @from@ defaults to @0@, and @size@ defaults to @10@.

<pre class="prettyprint lang-js">
{
    "from" : 0, "size" : 10,
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h3. Explain

p. Enables explanation for each hit on how its score was computed.

<pre class="prettyprint lang-js">
{
    "explain": true,
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h3. Fields

p. Allows to selectively load specific *stored* fields for each document represented by a search hit. Defaults to load the internal @_source@ field.

<pre class="prettyprint lang-js">
{
    "fields" : ["user", "postDate"],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h3. Sort

p. Allows to add one or more sort on specific fields. Each sort can be reversed as well. The sort is defined on a per field level, with special field name for @score@ to sort by score.

<pre class="prettyprint lang-js">
{
    "sort" : [
        { "postDate" : {"reverse" : true} },
        "user",
        { "name" : "desc" },
        { "age" : "desc" },
        "score"
    ]
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. If you JSON parser support ordering without an array, the sort request can also be structured as follows:

<pre class="prettyprint lang-js">
{
    "sort" : {
        "postDate" : {"reverse" : true},
        "user" : { },
        "score" : { }
    },
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

h3. Facet Queries

p. Allows to add facet queries to be executed with the search. Facet queries are basically queries expressed using the "Query DSL":../query_dsl, and return a count restricted to the results of the search query.

<pre class="prettyprint lang-js">
{
    "facets" : {
        "wow_facet" : { 
            "query" : {
                "term" : { "tag" : "wow" }
            }
        },
        "es_facet" : { 
            "query" : {
                "term" : { "tag" : "elasticsearch" }
            }
        }
    }
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>

p. The body of each @query@ element within each facet is a "Query DSL":../query_dsl. The name of each facet (@wow_facet@ and @es_facet@ in our case), will be used to return the facet count. After the @hits@ element within the response, the @facets@ element will include all the named facets.

p. In the above example, the facets are bounded by the search query (the count is intersected with the search query). Sometimes, certain query facets should be executed without intersecting with the search query (globally). This can be done by setting the @global@ parameter to @true@, for example, now, the @es_facet@ will be executed globally:

<pre class="prettyprint lang-js">
{
    "facets" : {
        "wow_facet" : { 
            "query" : {
                "term" : { "tag" : "wow" }
            }
        },
        "es_facet" : { 
            "query" : {
                "term" : { "tag" : "elasticsearch" }
            },
            "global" : true
        }
    }
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
</pre>


h2. Index Boost

p. Allows to configure different boost level per index when searching across more than one indices. This is very handy when hits coming from one index matter more than hits coming from another index (think social graph where each user has an index).

<pre class="prettyprint lang-js">
{
    "indices_boost" : {
        "index1" : 1.4,
        "index2" : 1.3
    }
}
</pre>

h2. Highlighting

p. Allow to highlight search results on one or more fields. The implementation uses the lucene fast-vector-highlighter. The search request body:

<pre class="prettyprint lang-js">
{
    query : {...},
    "highlight" : {
        "fields" : {
            "_all" : {}
        }
    }
}
</pre>

p. In the above case, the @_all@ field will be highlighted for each search hit (there will be another element in each search each, called highlight, which includes the highlighted fields and the highlighted fragments).

p. Note, in order to highlight, the field in question must be @stored@ and have @term_vector@ of @with_positions_offsets@. In the above case, the mapping should include:

<pre class="prettyprint lang-js">
{
    "type_name" : {
        "_all" : {"store" : "yes", "term_vector" : "with_positions_offsets"}
    }
}
</pre>

p(note). The @_all@ field can be an easy to use candidate for highlighting.

p. By default, the highlighting will wrap highlighted text in @<em>@ and @</em>@. This can be controlled by setting @pre_tags@ and @post_tags@, for example:

<pre class="prettyprint lang-js">
{
    "query" : {...},
    "highlight" : {
        "pre_tags" : ["<tag1>", "<tag2>"],
        "post_tags" : ["</tag1>", "</tag2>"]
        "fields" : {
            "_all" : {}
        }
    }
}
</pre>

p. There can be a single tag or more, and the "importance" is ordered. There are also built in "tag" schemas, with currently a single schema called @styled@ with @pre_tags@ of:

<pre class="prettyprint">
<em class="hlt1">, <em class="hlt2">, <em class="hlt2">,
<em class="hlt3">, <em class="hlt4">, <em class="hlt5">,
<em class="hlt6">, <em class="hlt7">, <em class="hlt8">,
<em class="hlt9">
</pre>

p. And post tag of @</em>@. If you think of more nice to have built in tag schemas, just send an email to the mailing list or open an issue. Here is an example of switching tag schemas:

<pre class="prettyprint lang-js">
{
    "query" : {...},
    "highlight" : {
        "tag_schema" : "styled",
        "fields" : {
            "_all" : {}
        }
    }
}
</pre>

p. Each field highlighted can control the size of the highlighted fragment in characters (defaults to @100@), and the maximum number of fragments to return (defaults to @5@). For example:

<pre class="prettyprint lang-js">
{
    "query" : {...},
    "highlight" : {
        "fields" : {
            "_all" : {"fragment_size" : 150, "number_of_fragments" : 3}
        }
    }
}
</pre>

h2. Search Type

p. There are different execution paths that can be done when executing a distributed search. The distributed search operation needs to be scattered to all the relevant shards and then all the results are gathered back. When doing scatter/gather type execution, there are several ways to do that, specifically with search engines.

p. One of the questions when executing a distributed search is how much results to retrieve from each shard. For example, if we have 10 shards, the 1st shard might hold the most relevant results from 0 till 10, with other shards results ranking below it. For this reason, when executing a request, we will need to get results from 0 till 10 from all shards, sort them, and then return the results if we want to insure correct results.

p. Another question, which relates to search engine, is the fact that each shard stands on its own. When a query is executed on a specific shard, it does not take into account term frequencies and other search engine information from the other shards. If we want to support accurate ranking, we would need to first execute the query against all shards and gather the relevant term frequencies, and then, based on it, execute the query.

p. ElasticSearch is very flexible and allows to control the type of search to execute on a *per search request* basis. The types are:

h3. Query And Fetch

p. The most naive (and possibly fastest) implementation is to simply execute the query on all relevant shards and return the results. Each shard returns @size@ results. Since each shard already returns @size@ hits, this type actually returns @size@ times @number of shards@ results back to the caller.

h3. Query Then Fetch

p. The query is executed against all shards, but only enough information is returned (*not the document content*). The results are then sorted and ranked, and based on it, *only the relevant shards* are asked for the actual document content. The return number of hits is exactly as specified in @size@, since they are the only ones that are fetched. This is very handy when the index has a lot of shards (not replicas, shard id groups).

h3. Dfs, Query And Fetch

p. Same as "Query And Fetch", except for an initial scatter phase which goes and computes the distributed term frequencies for more accurate scoring.

h3. Dfs, Query Then Fetch

p. Same as "Query Then Fetch", except for an initial scatter phase which goes and computes the distributed term frequencies for more accurate scoring.

h2. Scrolling

p. A search request can be scrolled by specifying the @scroll@ parameter. The @scroll@ parameter is a time value parameter (for example: @scroll=5m@), indicating for how long the nodes that participate in the search will maintain relevant resources in order to continue and support it. This is very similar in its idea to opening a cursor against a database.

p. A @scroll_id@ is returned from the first search request (and from continuos) scroll requests. The @scroll_id@ should be used when scrolling (and thats it, no other parameter is required).

p(note). Scrolling is not intended for real time user requests, it is intended for cases like scrolling over large portions of data that exists within elasticsearch to reindex it for example.

