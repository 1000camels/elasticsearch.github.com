---
layout: doc_es
title: ElasticSearch Docs | REST Query DSL API | Geo Bounding Box Filter
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["query_dsl", "Query DSL"],
    ["geo_bounding_box_filter", "Geo Bounding Box Filter"],
];
</script>

h1. Geo Bounding Box Filter

p. A filter allowing to filter hits based on a point location using a bounding box. Assuming the following indexed document:

<pre class="prettyprint lang-js">
{
    "pin" : {
        "location" : {
            "lat" : 40.12,
            "lon" : -71.34
        }
    }
}
</pre>

p. Then the following simple query can be executed with a @geo_bounding_box@ filter:

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "pin.location" : {
                    "top_left" : {
                        "lat" : 40.73,
                        "lon" : -74.1
                    },
                    "bottom_right" : {
                        "lat" : 40.717,
                        "lon" : -73.99
                    }
                }
            }
        }
    }
}
</pre>

h2. Accepted Formats

p. In much the same way the geo_point type can accept different representation of the geo point, the filter can accept it as well:

h3. Lat Lon As Properties

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "pin.location" : {
                    "top_left" : {
                        "lat" : 40.73,
                        "lon" : -74.1
                    },
                    "bottom_right" : {
                        "lat" : 40.717,
                        "lon" : -73.99
                    }
                }
            }
        }
    }
}
</pre>

h3. Lat Lon As Array

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "pin.location" : {
                    "top_left" : [40.73, -74.1],
                    "bottom_right" : [40.717, -73.99]
                }
            }
        }
    }
}
</pre>

h3. Lat Lon As String

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "pin.location" : {
                    "top_left" : "40.73, -74.1",
                    "bottom_right" : "40.717, -73.99"
                }
            }
        }
    }
}
</pre>

h3. Geohash

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_bounding_box" : {
                "pin.location" : {
                    "top_left" : "drm3btev3e86",
                    "bottom_right" : "drm3btev3e86"
                }
            }
        }
    }
}
</pre>

h2. @geo_point@ Type

p. The filter *requires* the @geo_point@ type to be set on the relevant field.

h2. Multi Location Per Document

p. The filter can work with multiple locations / points per document. Once a single location / point matches the filter, the document will be included in the filter.

h2. Caching

p. The result of the filter is not cached by default. The `_cache` can be set to `true` to cache the *result* of the filter. This is handy when the same bounding box parameters are used on several (many) other queries. Note, the process of caching the first execution is higher when caching (since it needs to satisfy different queries).
