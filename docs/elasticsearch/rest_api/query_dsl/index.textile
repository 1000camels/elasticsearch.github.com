---
layout: doc_es
title: ElasticSearch Docs | REST Query DSL API
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["query_dsl", "Query DSL"]
];
</script>

h1. Query DSL

p. ElasticSearch provides a full query dsl based on JSON to define queries. In general, there are basic queries such as @term@ or @prefix@. There are also compound queries like the @bool@ query. Queries can also have filters associated with them such as the @filteredQuery@ or @constantScore@ queries, with specific filter queries. 

p(note). Filters are very handy since they perform an order of magnitude better then plain queries since no scoring is required and they are automatically cached by ElasticSearch.

h2. Term Query

p. Matches documents that have fields that contain a a term (*not analyzed*). The term query maps to Lucene @TermQuery@. The following matches documents where the user field contains the term @kimchy@:

<pre class="prettyprint lang-js">
{
    "term" : { "user" : "kimchy" }
}    
</pre>

p. A boost can also be associated with the query:

<pre class="prettyprint lang-js">
{
    "term" : { "user" : { "value" : "kimchy", "boost" : 2.0 } }
}    
</pre>

h2. Range Query

p. Matches documents with fields that have terms within a certain range. The type of the Lucene query depends on the field type, for @string@ fields, the @TermRangeQuery@, while for number/date fields, the query is a @NumericRangeQuery@. The following example returns all documents where @age@ is between @10@ and @20@:

<pre class="prettyprint lang-js">
{
    "range" : {
        "age" : { 
            "from" : 10, 
            "to" : 20, 
            "includeLower" : true, 
            "includeUpper": false, 
            "boost" : 2.0
        }
    }
}
</pre>

h2. Prefix Query

p. Matches documents that have fields containing terms with a specified prefix. The prefix query maps to Lucene @PrefixQuery@. The following matches documents where the user field contains a term that starts with @ki@:

<pre class="prettyprint lang-js">
{
    "prefix" : { "user" : "sh" }
}
</pre>

p. A boost can also be associated with the query:

<pre class="prettyprint lang-js">
{
    "prefix" : { "user" :  { "prefix" : "ki", "boost" : 2.0 } }
}
</pre>

h2. Wildcard Query

p. Matches documents that have fields matching a wildcard expression. Supported wildcards are @*@, which matches any character sequence (including the empty one), and @?@, which matches any single character. Note this query can be slow, as it needs to iterate over many terms. In order to prevent extremely slow wildcard queries, a wildcard term should not start with one of the wildcards @*@ or @?@. The wildcard query maps to Lucene @WildcardQuery@.

<pre class="prettyprint lang-js">
{
    "wildcard" : { "user" : "ki*y" }
}
</pre>

h2. Match All Query

p. A query that matches all documents. Maps to Lucene @MatchAllDocsQuery@.

<pre class="prettyprint lang-js">
{
    "matchAll" : { }
}
</pre>

p. Which can also have boost associated with it:

<pre class="prettyprint lang-js">
{
    "matchAll" : { "boost" : 1.2 }
}
</pre>

h2. Query String Query

p. A query that uses a query parser in order to parse its content. Here is an example:

<pre class="prettyprint lang-js">
{
    "queryString" : { 
        "defaultField" : "content", 
        "query" : "this AND that OR thus"
    }
}
</pre>

p. The @queryString@ top level parameters include:

|_. Parameter |_. Description |
| @query@ | The actual query to be parsed. |
| @defaultField@ | The default field for query terms if no prefix field is specified. |
| @defaultOperator@ | The default operator used if no explicit operator is specified. For example, with a default operator of @OR@, the query @capital of Hungary@ is translated to @capital OR of OR Hungary@, and with default operator of @AND@, the same query is translated to @capital AND of AND Hungary@. The default value is @OR@. |
| @analyzer@ | The analyzer name used to analyze the query string. |
| @allowLeadingWildcard@ | When set, @*@ or @?@ are allowed as the first character. Defaults to @true@. |
| @lowercaseExpandedTerms@ | Whether terms of wildcard, prefix, fuzzy, and range queries are to be automatically lower-cased or not (since they are not analyzed). Default it @true@. |
| @enablePositionIncrements@ | Set to @true@ to enable position increments in result queries. Defaults to @true@. |
| @fuzzyPrefixLength@ | Set the prefix length for fuzzy queries. Default is @0@. |
| @fuzzyMinSim@ | Set the minimum similarity for fuzzy queries. Defaults to @0.5@ |
| @phraseSlop@ | Sets the default slop for phrases. If zero, then exact phrase matches are required.  Default value is @0@.|
| @boost@ | Sets the boost value of the query. Defaults to @1.0@. |

p. The @queryString@ query can also run against multiple fields. The idea of running the @queryString@ query against multiple fields is by internally creating several queries for the same query string, each with @defaultField@ that match the fields provided. Since several queries are generated, combining them can be automatically done either using a @disMax@ query or a simple @bool@ query. For example (the @name@ is boosted by 5 using @^5@ notation):

<pre class="prettyprint lang-js">
{
    "queryString" : { 
        "fields" : ["content", "name^5"], 
        "query" : "this AND that OR thus",
        "useDisMax" : true
    }
}
</pre>

p. When running the @queryString@ query against multiple fields, the following additional parameters are allowed:

|_. Parameter |_. Description |
| @useDisMax@ | Should the queries be combined using @disMax@ (set it to @true@), or a @bool@ query (set it to @false@). Defaults to @true@.|
| @tieBreaker@ | When using @disMax@, the disjunction max tie breaker. Defaults to @0@. |

h2. Field Query

p. A query that executes a query string against a specific field. It is a simplified version of @queryString@ query (by setting the @defaultField@ to the field this query executed against). In its simplest form:

<pre class="prettyprint lang-js">
{
    "field" : { 
        "name.first" : "+something -else"
    }
}
</pre>

p. Most of the @queryString@ parameters are allowed with the @field@ query as well, in such a case, the query should be formatted as follows:

<pre class="prettyprint lang-js">
{
    "field" : { 
        "name.first" : {
            "query" : "+something -else",
            "boost" : 2.0,
            "enablePositionIncrements", false
        }
    }
}
</pre>


h2. Boolean Query

p. A query that matches documents matching boolean combinations of other queries. The bool query maps to Lucene @BooleanQuery@. It is built using one or more boolean clauses, each clause with a typed occurrence. The occurrence types are:

|_. Occur |_. Description |
| @must@ | The clause (query) must appear in matching documents. |
| @should@ | The clause (query) should appear in the matching document. A boolean query with no @must@ clauses, one or more @should@ clauses must match a document. The minimum number of should clauses to match can be set using @minimumNumberShouldMatch@ parameter. |
| @mustNot@ | The clause (query) must not appear in the matching documents. Note that it is not possible to search on documents that only consists of a @mustNot@ clauses. |

<pre class="prettyprint lang-js">
{
    "bool" : {
        "must" : {
            "term" : { "user" : "kimchy" }
        },
        "mustNot" : {
            "range" : {
                "age" : { "from" : 10, "to" : 20 }
            }
        },
        "should" : [
            {
                "term" : { "tag" : "wow" }
            },
            {
                "term" : { "tag" : "elasticsearch" }
            }
        ]
        "minimumNumberShouldMatch" : 1,
        "boost" : 1.0
    }
}
</pre>

h2. Disjunction Max Query

p. A query that generates the union of documents produced by its subqueries, and that scores each document with the maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries. 

p. This is useful when searching for a word in multiple fields with different boost factors (so that the fields cannot be combined equivalently into a single search field).  We want the primary score to be the one associated with the highest boost, not the sum of the field scores (as Boolean Query would give). If the query is "albino elephant" this ensures that "albino" matching one field and "elephant" matching another gets a higher score than "albino" matching both fields. To get this result, use both Boolean Query and DisjunctionMax Query: for each term a DisjunctionMaxQuery searches for it in each field, while the set of these DisjunctionMaxQuery's is combined into a BooleanQuery. 

p. The tie breaker capability allows results that include the same term in multiple fields to be judged better than results that include this term in only the best of those multiple fields, without confusing this with the better case of two different terms in the multiple fields.The default @tieBreakerMultiplier@ is @0.0@.

p. This query maps to Lucene @DisjunctionMaxQuery@.

<pre class="prettyprint lang-js">
{
    "disMax" : {
        "tieBreakerMultiplier" : 0.7,
        "boost" : 1.2,
        "queries" : [
            {
                "term" : { "age" : 34 }
            },
            {
                "term" : { "age" : 35 }
            }
        ]
    }
}    
</pre>

h2. Constant Score Query

p. A query that wraps a filter and simply returns a constant score equal to the query boost for every document in the filter. Maps to Lucene @ConstantScoreQuery@.

<pre class="prettyprint lang-js">
{
    "constantScore" : {
        "filter" : {
            "term" : { "user" : "kimchy"}
        },
        "boost" : 1.2
    }
}
</pre>

p. The filter object can hold only filter elements, not queries. Filters are much faster compared to queries since they don't perform any scoring, and they are cached within ElasticSearch.

h2. Filtered Query

p. A query that applies a filter to the results of another query. This query maps to Lucene @FilteredQuery@.

<pre class="prettyprint lang-js">
{
    "filteredQuery" : {
        "query" : {
            "term" : { "tag" : "wow" }
        },
        "filter" : {
            "range" : {
                "age" : { "from" : 10, "to" : 20 }
            }
        }
    }
}
</pre>

p. The filter object can hold only filter elements, not queries. Filters are much faster compared to queries since they don't perform any scoring, and they are cached within ElasticSearch.

h2. MoreLikeThis Query

p. More like this query find documents that are "like" provided text by running it against one or more fields.

<pre class="prettyprint lang-js">
{
    "moreLikeThis" : {
        "fields" : ["name.first", "name.last"],
        "likeText" : "text like this one",
        "minQueryFrequency" : 1,
        "maxQueryTerms" : 12
    }
}
</pre>

p. The @moreLikeThis@ top level parameters include:

|_. Parameter |_. Description |
|@fields@|A list of the fields to run the more like this query against, *required*.|
|@likeText@|The text to find documents like it, *required*.|
|@percentTermsToMatch@|The percentage of terms to match on (float value). Defaults to @0.3@ (30 percent).|
|@minTermFrequency@|The frequency below which terms will be ignored in the source doc. The default frequency is @2@.|
|@maxQueryTerms@|The maximum number of query terms that will be included in any generated query. Defaults to @25@.|
|@stopWords@|An array of stop words. Any word in this set is considered "uninteresting" and ignored. Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".|
|@minDocFreq@|The frequency at which words will be ignored which do not occur in at least this many docs. Defaults to @5@.|
|@maxDocFreq@|The maximum frequency in which words may still appear. Words that appear in more than this many docs will be ignored. Defaults to unbounded.|
|@minWordLen@|The minimum word length below which words will be ignored. Defaults to @0@.|
|@maxWordLen@|The maximum word length above which words will be ignored. Defaults to unbounded (@0@).|
|@boostTerms@|Whether to boost terms in query based on "score" or not. Defaults to @false@.|
|@boostTermsFactor@|Sets the boost factor to use when boosting terms. Defaults to @1@.|

h2. MoreLikeThisField Query

p. The @moreLikeThisField@ query is the same as the @moreLikeThis@ query, except it runs against a single field. It provides nicer query DSL over the generic @moreLikeThis@ query, and support typed fields query (automatically wraps typed fields with type filter to match onl on the specific type).

<pre class="prettyprint lang-js">
{
    "moreLikeThisField" : {
        "name.first" : {
            "likeText" : "text like this one",
            "minQueryFrequency" : 1,
            "maxQueryTerms" : 12
        }
    }
}
</pre>

p. The @moreLikeThisField@ top level parameters include:

|_. Parameter |_. Description |
|@likeText@|The text to find documents like it, *required*.|
|@percentTermsToMatch@|The percentage of terms to match on (float value). Defaults to @0.3@ (30 percent).|
|@minTermFrequency@|The frequency below which terms will be ignored in the source doc. The default frequency is @2@.|
|@maxQueryTerms@|The maximum number of query terms that will be included in any generated query. Defaults to @25@.|
|@stopWords@|An array of stop words. Any word in this set is considered "uninteresting" and ignored. Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".|
|@minDocFreq@|The frequency at which words will be ignored which do not occur in at least this many docs. Defaults to @5@.|
|@maxDocFreq@|The maximum frequency in which words may still appear. Words that appear in more than this many docs will be ignored. Defaults to unbounded.|
|@minWordLen@|The minimum word length below which words will be ignored. Defaults to @0@.|
|@maxWordLen@|The maximum word length above which words will be ignored. Defaults to unbounded (@0@).|
|@boostTerms@|Whether to boost terms in query based on "score" or not. Defaults to @false@.|
|@boostTermsFactor@|Sets the boost factor to use when boosting terms. Defaults to @1@.|


h2. Term Filter

p. Similar to term query, except that it acts as a filter. Can be placed within queries that accept a filter.

<pre class="prettyprint lang-js">
{
    "constantScore" : {
        "filter" : {
            "term" : { "user" : "kimchy"}
        },
    }
}
</pre>

h2. Range Filter

p. Similar to range query, except that it acts as a filter. Can be placed within queries that accept a filter.

<pre class="prettyprint lang-js">
{
    "constantScore" : {
        "filter" : {
            "range" : {
                "age" : { "from" : "10", "to" : "20", "includeLower" : true, "includeUpper" : false}
            }
        }
    }
}
</pre>

h2. Prefix Filter

p. Similar to phrase query, except that it acts as a filter. Can be placed within queries that accept a filter.

<pre class="prettyprint lang-js">
{
    "constantScore" : {
        "filter" : {
            "prefix" : { "user" : "ki" }
        }
    }
}
</pre>

h2. Query Filter

p. Wraps any query to be used as a filter. Can be placed within queries that accept a filter.

<pre class="prettyprint lang-js">
{
    "constantScore" : {
        "filter" : {
            "query" : { 
                "queryString" : { 
                    "defaultField" : "content", 
                    "query" : "this AND that OR thus"
                }
            }
        }
    }
}
</pre>

h2. Boolean Filter

p. Similar in concept to Boolean query, except that the clauses are other filters. Can be placed within queries that accept a filter.

<pre class="prettyprint lang-js">
{
    "filteredQuery" : {
        "query" : {
            "queryString" : { 
                "defaultField" : "message", 
                "query" : "elasticsearch"
            }
        },
        "filter" : {
            "bool" : {
                "must" : {
                    "term" : { "tag" : "wow" }
                },
                "mustNot" : {
                    "range" : {
                        "age" : { "from" : 10, "to" : 20 }
                    }
                },
                "should" : [
                    {
                        "term" : { "tag" : "sometag" }
                    },
                    {
                        "term" : { "tag" : "sometagtag" }
                    }
                ]
            }
        }
    }
}    
</pre>
