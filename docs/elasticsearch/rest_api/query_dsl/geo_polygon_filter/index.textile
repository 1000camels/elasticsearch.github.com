---
layout: doc_es
title: ElasticSearch Docs | REST Query DSL API | Geo Polygon Filter
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["query_dsl", "Query DSL"],
    ["geo_polygon_filter", "Geo Polygon Filter"],
];
</script>

h1. Geo Polygon Filter

p. A filter allowing to include hits that only fall within a polygon of points. Here is an example:

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_polygon" : {
                "person.location" : {
                    "points" : [
                        {"lat" : 40, "lon" : -70},
                        {"lat" : 30, "lon" : -80},
                        {"lat" : 20, "lon" : -90}
                    ]
                }
            }
        }
    }
}
</pre>

h2. Allowed Formats

h3. Lat Long as Array

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_polygon" : {
                "person.location" : {
                    "points" : [
                        [40, -70],
                        [30, -80],
                        [20, -90]
                    ]
                }
            }
        }
    }
}
</pre>

h3. Lat Lon as String

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_polygon" : {
                "person.location" : {
                    "points" : [
                        "40, -70",
                        "30, -80",
                        "20, -90"
                    ]
                }
            }
        }
    }
}
</pre>

h3. Geohash

<pre class="prettyprint lang-js">
{
    "filtered" : {
        "query" : {
            "match_all" : {}
        },
        "filter" : {
            "geo_polygon" : {
                "person.location" : {
                    "points" : [
                        "drn5x1g8cu2y",
                        "30, -80",
                        "20, -90"
                    ]
                }
            }
        }
    }
}
</pre>

h2. @geo_point@ Type

p. The filter *requires* the @geo_point@ type to be set on the relevant field.

h2. Caching

p. The result of the filter is not cached by default. The `_cache` can be set to `true` to cache the *result* of the filter. This is handy when the same points parameters are used on several (many) other queries. Note, the process of caching the first execution is higher when caching (since it needs to satisfy different queries).
