---
layout: doc_es
title: ElasticSearch Docs | REST Query DSL API | Query String Query
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["rest_api", "REST API"],
    ["query_dsl", "Query DSL"],
    ["queryString_query", "Query String Query"],
];
</script>

h1. Query String Query

p. A query that uses a query parser in order to parse its content. Here is an example:

<pre class="prettyprint lang-js">
{
    "queryString" : { 
        "defaultField" : "content", 
        "query" : "this AND that OR thus"
    }
}
</pre>

p. The @queryString@ top level parameters include:

|_. Parameter |_. Description |
| @query@ | The actual query to be parsed. |
| @defaultField@ | The default field for query terms if no prefix field is specified. |
| @defaultOperator@ | The default operator used if no explicit operator is specified. For example, with a default operator of @OR@, the query @capital of Hungary@ is translated to @capital OR of OR Hungary@, and with default operator of @AND@, the same query is translated to @capital AND of AND Hungary@. The default value is @OR@. |
| @analyzer@ | The analyzer name used to analyze the query string. |
| @allowLeadingWildcard@ | When set, @*@ or @?@ are allowed as the first character. Defaults to @true@. |
| @lowercaseExpandedTerms@ | Whether terms of wildcard, prefix, fuzzy, and range queries are to be automatically lower-cased or not (since they are not analyzed). Default it @true@. |
| @enablePositionIncrements@ | Set to @true@ to enable position increments in result queries. Defaults to @true@. |
| @fuzzyPrefixLength@ | Set the prefix length for fuzzy queries. Default is @0@. |
| @fuzzyMinSim@ | Set the minimum similarity for fuzzy queries. Defaults to @0.5@ |
| @phraseSlop@ | Sets the default slop for phrases. If zero, then exact phrase matches are required.  Default value is @0@.|
| @boost@ | Sets the boost value of the query. Defaults to @1.0@. |

p. The @queryString@ query can also run against multiple fields. The idea of running the @queryString@ query against multiple fields is by internally creating several queries for the same query string, each with @defaultField@ that match the fields provided. Since several queries are generated, combining them can be automatically done either using a @disMax@ query or a simple @bool@ query. For example (the @name@ is boosted by 5 using @^5@ notation):

<pre class="prettyprint lang-js">
{
    "queryString" : { 
        "fields" : ["content", "name^5"], 
        "query" : "this AND that OR thus",
        "useDisMax" : true
    }
}
</pre>

p. When running the @queryString@ query against multiple fields, the following additional parameters are allowed:

|_. Parameter |_. Description |
| @useDisMax@ | Should the queries be combined using @disMax@ (set it to @true@), or a @bool@ query (set it to @false@). Defaults to @true@.|
| @tieBreaker@ | When using @disMax@, the disjunction max tie breaker. Defaults to @0@. |

