---
layout: doc_es
title: ElasticSearch Docs | Cloud | Gateway
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["cloud", "Cloud"], 
    ["gateway", "Gateway"], 
];
</script>

h1. Cloud Gateway

p. ElasticSearch has been designed to do reliable asynchronous long term persistency. This enables several features including the ability for fast local "runtime" storage (including in-memory) while having a long term storage that can be slower.

p. But first, a step back. When designing a system that would be deployed on the cloud, lets take a search engine for example ;), things come and go. One of those things that come and go are disks. So, local storage, in cloud environments, is considered transient. In Amazon AWS for example, EBS (Elastic Block Store) was introduced to provide a mountable disk that survives restarts. So, we could configure our search engine to store the index on EBS. But, EBS requires periodic snapshotting to S3 (amazon blob store) for "safe" persistency, since EBS can certainly suffer from failures as well. Of course, this means more money spent on your cloud deployment since now one pays for both EBS and S3.

p. One way to work around this is to persist directly from the local store to S3 by writing some sort of synchronization script / code. But, if the machines fails we will loose all the data up to the point when the script last ran. The next step is to add replication (and sharding for performance) and so on. All of this is provided by elasticsearch out of the box.

p. Here is how elasticsearch can be configured to store both its cluster metadata (to survive full cluster failure) and indices in the cloud:

<pre class="prettyprint lang-js">
cloud:
    account: <Your Amazon AWS Account Here>
    key: <Your Amazon AWS Secret Key Here>
    blobstore:
        type: amazon
gateway:
    type: cloud
    cloud:
        container: mycontainerhere
</pre>

p. The above simple configuration will store things in Amazon S3. Simply change @amazon@ to @rackspace@ to use Rackspace CloudFiles. There is a long list of blobstore providers supported, including Azureblob.

