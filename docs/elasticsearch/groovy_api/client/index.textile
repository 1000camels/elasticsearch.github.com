---
layout: doc_es
title: ElasticSearch Docs | Groovy API | Client
---

<script type="text/javascript">
docBreadcrumb = [
    ["elasticsearch", "ElasticSearch"], 
    ["groovy_api", "Groovy API"],
    ["client", "Client"]
];
</script>

h1. Client

p. Obtaining an elasticsearch Groovy @GClient@ (a @GClient@ is a simple wrapper on top of the Java @Client@) is simple. The most common way to get a client is by starting an embedded @Node@ which acts as a node within the cluster.

h2. Node Client

p. A Node based client is the simplest form to get a @GClient@ to start executing operations against elasticsearch.

<pre class="prettyprint">
import org.elasticsearch.groovy.node.GNode
import org.elasticsearch.groovy.node.GNodeBuilder
import static org.elasticsearch.groovy.node.GNodeBuilder.*

// on startup

GNode node = nodeBuilder().node();
GClient client = node.client();

// on shutdown

node.close();
</pre>

p. Since elasticsearch allows to configure it using JSON based settings, the configuration itself can be done using a closure that represent the JSON:

<pre class="prettyprint">
import org.elasticsearch.groovy.node.GNode
import org.elasticsearch.groovy.node.GNodeBuilder
import static org.elasticsearch.groovy.node.GNodeBuilder.*

// on startup

GNodeBuilder nodeBuilder = nodeBuilder();
nodeBuilder.settings {
    node {
        client = true
    }
    cluster {
        name = "test"
    }
}

GNode node = nodeBuilder.node()

// on shutdown

node.stop().close()
</pre>
